Timer unit: 1e-06 s

Total time: 7.28742 s
File: ./RSFKM.py
Function: GetHMatrix at line 107

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   107                                           @profile
   108                                           def GetHMatrix(DataMatrix, H, S, V):
   109     19220      19598.0      1.0      0.3      for i, row in enumerate(DataMatrix):
   110    307024     450538.0      1.5      6.2          for k, centroid in enumerate(V):
   111    287835    6817288.0     23.7     93.5              H[i][k] = S[i][k] * (la.norm(np.subtract(row, centroid)) ** 2)

Total time: 299.246 s
File: ./RSFKM.py
Function: UpdateMembershipMatrix at line 114

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   114                                           @profile
   115                                           def UpdateMembershipMatrix(DataMatrix, H, S, Centroids, MembershipMatrix, RegParam):
   116        31    7624306.0 245945.4      2.5      GetHMatrix(DataMatrix, H, S, Centroids)
   117                                           
   118                                               #print DataMatrix
   119                                           
   120                                               #minimization solving
   121                                               #This part essentially corresponds to formula 14
   122        31        853.0     27.5      0.0      Ux = Variable(MembershipMatrix.shape[1])
   123        31        392.0     12.6      0.0      h_tilde = Parameter(H.shape[1])
   124                                           
   125        31      76879.0   2480.0      0.0      constraints = [ 0 <= Ux, sum(Ux) == 1]
   126                                           
   127     19220      40342.0      2.1      0.0      for i, Ui in enumerate(MembershipMatrix):
   128     19189    3071635.0    160.1      1.0          h_tilde.value = np.multiply(H[i], ( -1/(2*RegParam) ))
   129     19189    9733386.0    507.2      3.3          expression = square( norm( Ux - h_tilde ) )
   130     19189     196381.0     10.2      0.1          objective = Minimize(expression)
   131                                           
   132     19189   11076543.0    577.2      3.7          prob = Problem(objective, constraints)
   133                                           
   134                                                   # if i in range(0,10):
   135                                                   #     data = prob.get_problem_data(ECOS)
   136                                                   #     print "Ux size: ", MembershipMatrix.shape[1]
   137                                                   #     print "A: ", data["A"]
   138                                                   #     print "G: ", data["G"]
   139                                                   #     print data
   140                                           
   141     19189  266732686.0  13900.3     89.1          prob.solve(solver=ECOS)
   142                                           
   143     19189      50553.0      2.6      0.0          if Ux.value is not None:
   144                                                       #print "Value of Ux", Ux.value
   145                                                       #print "Value of Ux Transpose", Ux.value.transpose()[0]
   146     19189     641975.0     33.5      0.2              MembershipMatrix[i] = Ux.value.transpose()[0]
   147                                                       #print "Solution ", prob.value, "Solution Value", Ux.value, "H part", h_tilde.value
   148                                                   else:
   149                                                       print "No solution", Ux.value, prob.value, prob.status, h_tilde.value

Total time: 7.96345 s
File: ./RSFKM.py
Function: UpdateS at line 154

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   154                                           @profile
   155                                           def UpdateS(DataMatrix, Centroids, S, ThresholdValue):
   156        31         28.0      0.9      0.0      NormResult = None
   157                                           
   158     19220      24239.0      1.3      0.3      for i, row in enumerate(S):
   159    307024     394708.0      1.3      5.0          for k, col in enumerate(row):
   160    287835    6151306.0     21.4     77.2              NormResult = la.norm(np.subtract(DataMatrix[i], Centroids[k]))
   161    287835     483392.0      1.7      6.1              if NormResult == 0:
   162                                                           S[i][k]
   163    287835     237949.0      0.8      3.0              elif NormResult > ThresholdValue:
   164                                                           S[i][k] = 0
   165                                                       else:
   166    287835     671826.0      2.3      8.4                  S[i][k] = 1/NormResult 

Total time: 27.6816 s
File: ./RSFKM.py
Function: FindCentroids at line 174

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   174                                           @profile
   175                                           def FindCentroids(DataMatrix, V, S, U):
   176        31         36.0      1.2      0.0      SummedDenom = 0.0 #this is the buffer for the denomonator of our vector centroid function
   177        31         27.0      0.9      0.0      Scalar = 0.0
   178                                           
   179                                               #for each centroid
   180       496        794.0      1.6      0.0      for k, vk in enumerate(V):
   181       465       1739.0      3.7      0.0          tempCentroid = np.zeros([DataMatrix.shape[1]])
   182                                           
   183                                                   #for each item in the data matrix
   184    288300     341147.0      1.2      1.2          for i, row in enumerate(DataMatrix):
   185    287835     589525.0      2.0      2.1              Scalar = S[i][k] * U[i][k] #get the scalar we are multiplying our x_i by
   186                                           
   187    287835     297128.0      1.0      1.1              if Scalar != 0.0:
   188                                           
   189                                                           #multiply our scalar against data matrix vector i
   190                                                           # and add the result to temp centroid f
   191                                                           #tempCentroid = np.multiply(DataMatrix[i], Scalar)
   192   8635050    8990109.0      1.0     32.5                  for f, feature in enumerate(vk):
   193   8347215   17135610.0      2.1     61.9                      tempCentroid[f] += Scalar * DataMatrix[i][f]
   194                                           
   195                                                       #keep track of our denomonator sum
   196    287835     316312.0      1.1      1.1              SummedDenom += Scalar
   197                                           
   198                                           
   199                                                   #divide our centroid vector by the denomonator we computed
   200       465        522.0      1.1      0.0          if SummedDenom != 0.0:
   201       465       4296.0      9.2      0.0              tempCentroid = np.multiply(tempCentroid, 1/SummedDenom)
   202                                           
   203                                           
   204                                                   #iterate over number of features in our Vectors jsut to copy one to the other
   205       465       3896.0      8.4      0.0          V[k] = np.copy(tempCentroid)
   206                                           
   207                                                   #reset our temp centroid
   208       465        485.0      1.0      0.0          SummedDenom = 0.0
   209                                           
   210        31         24.0      0.8      0.0      return V

